import datetime

import isodate
import pytz
import xmlschema
import xsdata.formats.dataclass.parsers
import xsdata.formats.dataclass.serializers
import xsdata.formats.dataclass.serializers.config
import xsdata.models.datatype

import autogenerated.noptis.ptshared.pt_shared_types as pt_shared
import autogenerated.noptis.roi_from_pub_trans as noptis

TIMEZONE_STOCKHOLM = pytz.timezone('Europe/Stockholm')


def test_validate_autogenerated_deviation_case_update_events():
    xml_serialize = xsdata.formats.dataclass.serializers.XmlSerializer(
        config=xsdata.formats.dataclass.serializers.config.SerializerConfig(
            pretty_print=True))

    time_scope = noptis.TimeScope(
        from_date_time=xsdata.models.datatype.XmlDateTime.from_datetime(
            datetime.datetime.now(datetime.timezone.utc)),
        upto_date_time=xsdata.models.datatype.XmlDateTime.from_datetime(
            datetime.datetime.now(datetime.timezone.utc)))
    vehicle_journey_ref = noptis.VehicleJourneyRef(gid=9015001001030320)
    scope_element = noptis.ScopeElement(
        concerns_arrivals=pt_shared.YesNo.Y,
        id=5024193515258353,
        concerns_departures=pt_shared.YesNo.Y,
        vehicle_journey_ref=vehicle_journey_ref,
        time_scope=time_scope)
    scope_elements = noptis.ScopeElements(scope_element=[scope_element])
    user = noptis.User(organisational_unit_ref=noptis.OrganisationalUnitRef(
        id=4010000125439279),
                       organisational_unit_code='JustATest',
                       organisation_code='company')
    deviation_reason = noptis.DeviationReason(
        standard_category=noptis.DeviationReasonCategory.RESTOREOPERATION)

    now = datetime.datetime.now(tz=TIMEZONE_STOCKHOLM)

    deviation_case_ref = noptis.DeviationCaseRef(id=2, gid=9076625015103955)
    deviation_case = noptis.DeviationCase(
        id=8830121665806370,
        timestamp=xsdata.models.datatype.XmlDateTime.from_datetime(
            datetime.datetime.now(tz=TIMEZONE_STOCKHOLM)),
        operation_action_type=noptis.OperationActionType.INFORMATION,
        gid=9076625015103955,
        source_note='JustATest',
        deviation_reason=deviation_reason,
        reported_by_user=user,
        replaced_by_deviation_case_ref=deviation_case_ref,
        scope_elements=scope_elements)
    deviation_case_update_event = noptis.DeviationCaseEvent(
        message_id='598936311', deviation_case=deviation_case)

    deviation_case_update_events = noptis.FromPubTransMessages(
        deviation_case_update_event=[deviation_case_update_event],
        peer_id='1',
        document_layout_version=noptis.FromDocumentLayoutVersion('3.0.9'),
        local_time_zone_offset_time=isodate.duration_isoformat(now.dst()),
        local_language='sv')

    roi_from_pub_trans = xmlschema.XMLSchema(
        '../autogenerated/fixed/ROI-FromPubTrans.xsd')
    roi_from_pub_trans.validate(
        xml_serialize.render(deviation_case_update_events))
    assert roi_from_pub_trans.is_valid(
        xml_serialize.render(deviation_case_update_events))


def test_validate_autogenerated_deviation_message_version_event():
    deviation_message_version_event = noptis.FromPubTransMessages(
        deviation_message_version_event=[
            noptis.DeviationMessageVersionEvent(
                message_id='589294460',
                deviation_message_version=noptis.DeviationMessageVersion(
                    id=6914554248199013,
                    deviation_case_ref=noptis.DeviationCaseRef(
                        id=8830121665806370, gid=9076625015103955),
                    target_audiences=noptis.TargetAudiences([
                        noptis.TargetAudience(id=6010000643857190,
                                              type_code='PASSENG')
                    ]),
                    message_variants=noptis.MessageVariants([
                        noptis.MessageVariant(
                            id=4050001083805126,
                            content='Header - TEST',
                            content_type=noptis.ContentType.TEXT_PLAIN,
                            usage_type='HEADER',
                            language='sv'),
                        noptis.MessageVariant(
                            id=4050001083805127,
                            content='Details - TEST',
                            content_type=noptis.ContentType.TEXT_PLAIN,
                            usage_type='DETAILS',
                            language='sv'),
                        noptis.MessageVariant(
                            id=4050001083805128,
                            content='Summary - TEST',
                            content_type=noptis.ContentType.TEXT_PLAIN,
                            usage_type='SUMMARY',
                            language='sv')
                    ]),
                    priority=noptis.Priority(importance_level=7,
                                             influence_level=5,
                                             urgency_level=1),
                    publication_scopes=noptis.PublicationScopes([
                        noptis.PublicationScope(
                            id=8033276902724864,
                            is_restricted_to_deviation_scope=pt_shared.YesNo.Y,
                            line_ref=noptis.LineRef(gid=9011001001200000))
                    ]),
                    reported_by_user=noptis.User(
                        organisational_unit_ref=noptis.OrganisationalUnitRef(
                            id=4010000125439279),
                        organisational_unit_code='JustATest',
                        organisation_code='company'),
                    version_number=1,
                    timestamp=xsdata.models.datatype.XmlDateTime.from_datetime(
                        datetime.datetime.now(datetime.timezone.utc)),
                    requires_publication_approval=pt_shared.YesNo.Y,
                    publish_from_date_time=xsdata.models.datatype.
                    XmlDateTime.from_datetime(
                        datetime.datetime.now(datetime.timezone.utc)),
                    publish_upto_date_time=xsdata.models.datatype.
                    XmlDateTime.from_datetime(
                        datetime.datetime.now(datetime.timezone.utc)),
                    public_note='Just a test.'))
        ],
        peer_id='1',
        document_layout_version=noptis.FromDocumentLayoutVersion('3.0.9'),
        local_time_zone_offset_time=isodate.duration_isoformat(
            datetime.datetime.now(tz=TIMEZONE_STOCKHOLM).dst()),
        local_language='sv')

    roi_from_pub_trans = xmlschema.XMLSchema(
        '../autogenerated/fixed/ROI-FromPubTrans.xsd')
    xml_serialize = xsdata.formats.dataclass.serializers.XmlSerializer(
        config=xsdata.formats.dataclass.serializers.config.SerializerConfig(
            pretty_print=True))
    print(xml_serialize.render(deviation_message_version_event))
    roi_from_pub_trans.validate(
        xml_serialize.render(deviation_message_version_event))
    assert roi_from_pub_trans.is_valid(
        xml_serialize.render(deviation_message_version_event))
