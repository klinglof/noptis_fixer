import dataclasses
import os
import pathlib
import re

import xmlschema


def fix_schema_location_path(content):
    """Changes schemaLocation paths from windows delimiter to unix delimiter"""
    schema_locations = re.findall('(?<=schemaLocation=").*(?="/>)', content)
    for location in schema_locations:
        content = content.replace(location,
                                  pathlib.PureWindowsPath(location).as_posix())
    return content


def fix_remove_incorrect_import(content):
    """Remove incorrect import: Two imports for the same namespace is not
    allowed"""
    import_statements = re.findall(
        '(<xs:import namespace="http://www\.pubtrans\.com/PT/1\.0" schemaLocation=".*PT-XMLStream\.xsd"/>)',
        content)
    return content.replace(import_statements[-1], '')


def fix_add_missing_include(content):
    """Fix incorrect import: Extending a namespace is done with include."""
    return content.replace(
        '</xs:annotation>\n\t'
        '<!--  *********************************************************  -->',
        '</xs:annotation>\n\t'
        '<xs:include schemaLocation="PT-XMLStream.xsd"/>\n\t'
        '<!--  *********************************************************  -->')


def apply_fixes(schema_root_path: pathlib.Path, fix_path: pathlib.Path):
    schema_file_paths = find_schema_files(schema_root_path)
    for file_path in schema_file_paths:
        with open(file_path, 'r') as file:
            content = file.read()
        fixed_content = fix_schema_location_path(content)
        if file_path.name in ('ROI-FromPubTrans.xsd', 'ROI-ToPubTrans.xsd'):
            fixed_content = fix_remove_incorrect_import(fixed_content)
        if file_path.name == 'PT-SharedTypes.xsd':
            fixed_content = fix_add_missing_include(fixed_content)
        fixed_file_path = pathlib.Path(fix_path,
                                       file_path.relative_to(schema_root_path))
        fixed_file_path.parent.mkdir(exist_ok=True, parents=True)
        with open(fixed_file_path, 'w') as file:
            file.write(fixed_content)


def find_schema_files(path: pathlib.Path):
    schema_files = [
        name for name in path.rglob('*') if str(name).endswith('.xsd')
    ]
    return schema_files


@dataclasses.dataclass
class SchemaCollection:
    rii_control_action: xmlschema.XMLSchema10
    rii_shared_types: xmlschema.XMLSchema10
    roi_from_pub_trans: xmlschema.XMLSchema10
    roi_shared_types: xmlschema.XMLSchema10
    roi_to_pub_trans: xmlschema.XMLSchema10


def schema_collection(fixed_files_path):
    _rii_control_action = xmlschema.XMLSchema(
        pathlib.Path(fixed_files_path, 'RII-ControlAction.xsd'))
    _rii_shared_types = xmlschema.XMLSchema(
        pathlib.Path(fixed_files_path, 'RII-SharedTypes.xsd'))
    _roi_from_pub_trans = xmlschema.XMLSchema(
        pathlib.Path(fixed_files_path, 'ROI-FromPubTrans.xsd'))
    _roi_shared_types = xmlschema.XMLSchema(
        pathlib.Path(fixed_files_path, 'ROI-SharedTypes.xsd'))
    _roi_to_pub_trans = xmlschema.XMLSchema(
        pathlib.Path(fixed_files_path, 'ROI-ToPubTrans.xsd'))
    return SchemaCollection(rii_control_action=_rii_control_action,
                            rii_shared_types=_rii_shared_types,
                            roi_from_pub_trans=_roi_from_pub_trans,
                            roi_shared_types=_roi_shared_types,
                            roi_to_pub_trans=_roi_to_pub_trans)


def generate_library(fixed_files_path,
                     package_name='autogenerated.noptis',
                     make_pretty=True):
    os.system(f'xsdata -r {fixed_files_path} --package {package_name}')
    os.system(f'xsdata {fixed_files_path}{os.sep}ROI-FromPubTrans.xsd '
              f'--package {package_name}')
    package_path = package_name.replace(".", os.sep)
    if make_pretty:
        os.system(f'yapf -ir {package_path}')
        package_files = (str(f) for f in pathlib.Path(package_path).rglob('*')
                         if f.is_file())
        os.system(f'pre-commit run --files {" ".join(package_files)}')


if __name__ == '__main__':
    import download
    SCHEMA_PATH = pathlib.Path('temp/raw')
    FIX_PATH = pathlib.Path('temp/fixed')
    PACKAGE_NAME = 'temp.noptis'

    download.download_schema(SCHEMA_PATH)
    apply_fixes(SCHEMA_PATH, FIX_PATH)
    generate_library(FIX_PATH, PACKAGE_NAME)
    schema = schema_collection(FIX_PATH)
    schema.roi_from_pub_trans.validate(
        pathlib.Path('test/samples/publish_decision_event.xml'))
